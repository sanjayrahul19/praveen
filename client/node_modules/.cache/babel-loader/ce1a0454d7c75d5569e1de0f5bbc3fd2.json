{"ast":null,"code":"/**\n * @remix-run/router v1.0.5\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeys.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\nconst validActionMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validActionMethods = new Set(validActionMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validActionMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = _extends({}, location, init.history.encodeLocation(location));\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result, opts && opts.replace === true);\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult);\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined,\n    // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n  async function handleFetcherLoader(key, routeId, path, match, matches) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n  async function startRedirectNavigation(state, redirect, replace) {\n    var _window;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n    if (typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation; // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && formMethod && isSubmissionMethod(formMethod) && formEncType && formData) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData\n        }\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined\n        }\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp) {\n    let {\n      requestContext\n    } = _temp === void 0 ? {} : _temp;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n  async function queryRoute(request, _temp2) {\n    let {\n      routeId,\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isSubmissionMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n    let loaderRequest = new Request(request.url, {\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400)\n    };\n  }\n  return {\n    path: createPath(parsedPath)\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) ||\n  // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search ||\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return defaultShouldRevalidate;\n}\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      let isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n        location = createPath(resolvedLocation);\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\nfunction createClientSideRequest(location, signal, submission) {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  matches.forEach(match => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp3) {\n  let {\n    pathname,\n    routeId,\n    method\n  } = _temp3 === void 0 ? {} : _temp3;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\nfunction isSubmissionMethod(method) {\n  return validActionMethods.has(method);\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","current","parsedPath","searchIndex","createClientSideURL","origin","invariant","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","subscriber","constructor","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validActionMethodsArr","validActionMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","result","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectLocation","newOrigin","redirectHistoryAction","isSubmissionMethod","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","query","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","shouldRevalidateLoader","shouldRevalidate","isNewLoader","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","isAbsolute","activeMatches","resolvedLocation","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createClientSideURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(\n    base,\n    `No window.location.(origin|href) available to create URL for href: ${href}`\n  );\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(\n        typeof to === \"string\" ? to : createPath(to)\n      );\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type SubmissionFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | SubmissionFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: SubmissionFormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createClientSideURL,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  SubmissionFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validActionMethodsArr: SubmissionFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validActionMethods = new Set<SubmissionFormMethod>(validActionMethodsArr);\n\nconst validRequestMethodsArr: FormMethod[] = [\"get\", ...validActionMethodsArr];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(\n        state,\n        result,\n        opts && opts.replace === true\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult);\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (typeof window?.location !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      formMethod &&\n      isSubmissionMethod(formMethod) &&\n      formEncType &&\n      formData\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isSubmissionMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, { signal: request.signal });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute =\n        /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isSubmissionMethod(method: string): method is SubmissionFormMethod {\n  return validActionMethods.has(method as SubmissionFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}